#define _USE_MATH_DEFINES
#include <math.h>
#include <curand_kernel.h>

__device__ curandState_t *curand_states[400];

__constant__ int steps_per_kernel_call = 1000;
__constant__ int steps_per_period = 1000;
__constant__ int periods = 1000;
__constant__ int afterstep_every = 1000;

__constant__ float dt = 0.0016666666666666668;

__device__ float parameter_f_values[400] =
    { 0.06283185307179587, 0.06503647949536766, 0.06724110591893943, 0.06944573234251122, 0.071650358766083,
0.07385498518965479, 0.07605961161322658, 0.07826423803679836, 0.08046886446037015, 0.08267349088394194, 0.08487811730751371, 0.0870827437310855,
0.08928737015465729, 0.09149199657822907, 0.09369662300180086, 0.09590124942537265, 0.09810587584894442, 0.1003105022725162, 0.10251512869608799,
0.10471975511965978, 0.10692438154323156, 0.10912900796680335, 0.11133363439037514, 0.11353826081394691, 0.1157428872375187, 0.11794751366109049,
0.12015214008466227, 0.12235676650823406, 0.12456139293180585, 0.12676601935537762, 0.1289706457789494, 0.13117527220252118, 0.13337989862609298,
0.13558452504966478, 0.13778915147323656, 0.13999377789680834, 0.1421984043203801, 0.1444030307439519, 0.1466076571675237, 0.14881228359109547,
0.15101691001466727, 0.15322153643823905, 0.15542616286181082, 0.1576307892853826, 0.1598354157089544, 0.16204004213252618, 0.16424466855609798,
0.16644929497966976, 0.16865392140324154, 0.1708585478268133, 0.1730631742503851, 0.1752678006739569, 0.17747242709752867, 0.17967705352110047,
0.18188167994467225, 0.18408630636824402, 0.1862909327918158, 0.1884955592153876, 0.19070018563895938, 0.19290481206253116, 0.19510943848610296,
0.19731406490967474, 0.1995186913332465, 0.20172331775681832, 0.2039279441803901, 0.20613257060396187, 0.20833719702753367, 0.21054182345110545,
0.21274644987467722, 0.21495107629824903, 0.2171557027218208, 0.21936032914539258, 0.22156495556896436, 0.22376958199253616, 0.22597420841610794,
0.2281788348396797, 0.23038346126325152, 0.2325880876868233, 0.23479271411039507, 0.23699734053396687, 0.23920196695753865, 0.24140659338111042,
0.24361121980468223, 0.245815846228254, 0.24802047265182578, 0.2502250990753976, 0.25242972549896936, 0.25463435192254114, 0.2568389783461129,
0.2590436047696847, 0.26124823119325646, 0.26345285761682824, 0.26565748404040007, 0.26786211046397185, 0.2700667368875436, 0.27227136331111546,
0.27447598973468723, 0.276680616158259, 0.2788852425818308, 0.28108986900540256, 0.28329449542897434, 0.2854991218525461, 0.2877037482761179,
0.28990837469968966, 0.29211300112326144, 0.29431762754683327, 0.29652225397040505, 0.2987268803939768, 0.30093150681754866, 0.30313613324112043,
0.3053407596646922, 0.307545386088264, 0.30975001251183576, 0.31195463893540754, 0.3141592653589793, 0.3163638917825511, 0.31856851820612286,
0.32077314462969464, 0.3229777710532664, 0.3251823974768383, 0.3273870239004101, 0.32959165032398186, 0.33179627674755363, 0.3340009031711254,
0.3362055295946972, 0.33841015601826896, 0.34061478244184074, 0.3428194088654125, 0.3450240352889843, 0.34722866171255606, 0.34943328813612784,
0.3516379145596996, 0.3538425409832715, 0.3560471674068433, 0.35825179383041506, 0.36045642025398683, 0.3626610466775586, 0.3648656731011304,
0.36707029952470216, 0.36927492594827394, 0.3714795523718457, 0.3736841787954175, 0.37588880521898926, 0.37809343164256104, 0.3802980580661328,
0.3825026844897047, 0.3847073109132765, 0.38691193733684826, 0.38911656376042003, 0.3913211901839918, 0.3935258166075636, 0.39573044303113536,
0.39793506945470714, 0.4001396958782789, 0.4023443223018507, 0.40454894872542246, 0.40675357514899424, 0.4089582015725661, 0.4111628279961379,
0.4133674544197097, 0.41557208084328146, 0.41777670726685323, 0.419981333690425, 0.4221859601139968, 0.42439058653756856, 0.42659521296114034,
0.4287998393847121, 0.4310044658082839, 0.43320909223185566, 0.43541371865542744, 0.4376183450789993, 0.4398229715025711, 0.4420275979261429,
0.44423222434971465, 0.44643685077328643, 0.4486414771968582, 0.45084610362043, 0.45305073004400176, 0.45525535646757354, 0.4574599828911453,
0.4596646093147171, 0.46186923573828886, 0.46407386216186064, 0.4662784885854325, 0.4684831150090043, 0.4706877414325761, 0.47289236785614785,
0.47509699427971963, 0.4773016207032914, 0.4795062471268632, 0.48171087355043496, 0.48391549997400674, 0.4861201263975785, 0.4883247528211503,
0.49052937924472206, 0.49273400566829384, 0.4949386320918657, 0.4971432585154375, 0.4993478849390093, 0.501552511362581, 0.5037571377861528,
0.5059617642097246, 0.5081663906332964, 0.5103710170568682, 0.5125756434804399, 0.5147802699040117, 0.5169848963275835, 0.5191895227511553,
0.521394149174727, 0.5235987755982989, 0.5258034020218707, 0.5280080284454425, 0.5302126548690143, 0.532417281292586, 0.5346219077161578,
0.5368265341397296, 0.5390311605633014, 0.5412357869868731, 0.5434404134104449, 0.5456450398340167, 0.5478496662575885, 0.5500542926811604,
0.5522589191047321, 0.5544635455283039, 0.5566681719518757, 0.5588727983754475, 0.5610774247990192, 0.563282051222591, 0.5654866776461628,
0.5676913040697346, 0.5698959304933063, 0.5721005569168781, 0.5743051833404499, 0.5765098097640217, 0.5787144361875934, 0.5809190626111652,
0.583123689034737, 0.5853283154583089, 0.5875329418818807, 0.5897375683054524, 0.5919421947290242, 0.594146821152596, 0.5963514475761678,
0.5985560739997395, 0.6007607004233113, 0.6029653268468831, 0.6051699532704549, 0.6073745796940266, 0.6095792061175984, 0.6117838325411702,
0.6139884589647421, 0.6161930853883139, 0.6183977118118856, 0.6206023382354574, 0.6228069646590292, 0.625011591082601, 0.6272162175061727,
0.6294208439297445, 0.6316254703533163, 0.6338300967768881, 0.6360347232004598, 0.6382393496240316, 0.6404439760476034, 0.6426486024711753,
0.644853228894747, 0.6470578553183188, 0.6492624817418906, 0.6514671081654624, 0.6536717345890342, 0.6558763610126059, 0.6580809874361777,
0.6602856138597495, 0.6624902402833213, 0.664694866706893, 0.6668994931304648, 0.6691041195540366, 0.6713087459776085, 0.6735133724011803,
0.675717998824752, 0.6779226252483238, 0.6801272516718956, 0.6823318780954674, 0.6845365045190391, 0.6867411309426109, 0.6889457573661827,
0.6911503837897545, 0.6933550102133262, 0.695559636636898, 0.6977642630604698, 0.6999688894840417, 0.7021735159076135, 0.7043781423311852,
0.706582768754757, 0.7087873951783288, 0.7109920216019006, 0.7131966480254723, 0.7154012744490441, 0.7176059008726159, 0.7198105272961877,
0.7220151537197594, 0.7242197801433312, 0.7264244065669031, 0.7286290329904749, 0.7308336594140467, 0.7330382858376184, 0.7352429122611902,
0.737447538684762, 0.7396521651083338, 0.7418567915319055, 0.7440614179554773, 0.7462660443790491, 0.7484706708026209, 0.7506752972261926,
0.7528799236497644, 0.7550845500733363, 0.7572891764969081, 0.7594938029204799, 0.7616984293440516, 0.7639030557676234, 0.7661076821911952,
0.768312308614767, 0.7705169350383387, 0.7727215614619105, 0.7749261878854823, 0.7771308143090541, 0.7793354407326258, 0.7815400671561976,
0.7837446935797695, 0.7859493200033413, 0.788153946426913, 0.7903585728504848, 0.7925631992740566, 0.7947678256976284, 0.7969724521212002,
0.7991770785447719, 0.8013817049683437, 0.8035863313919155, 0.8057909578154873, 0.807995584239059, 0.8102002106626308, 0.8124048370862027,
0.8146094635097745, 0.8168140899333463, 0.819018716356918, 0.8212233427804898, 0.8234279692040616, 0.8256325956276334, 0.8278372220512051,
0.8300418484747769, 0.8322464748983487, 0.8344511013219205, 0.8366557277454922, 0.8388603541690641, 0.8410649805926359, 0.8432696070162077,
0.8454742334397795, 0.8476788598633512, 0.849883486286923, 0.8520881127104948, 0.8542927391340666, 0.8564973655576383, 0.8587019919812101,
0.8609066184047819, 0.8631112448283537, 0.8653158712519254, 0.8675204976754973, 0.8697251240990691, 0.8719297505226409, 0.8741343769462127,
0.8763390033697844, 0.8785436297933562, 0.880748256216928, 0.8829528826404998, 0.8851575090640715, 0.8873621354876433, 0.8895667619112151,
0.8917713883347869, 0.8939760147583586, 0.8961806411819305, 0.8983852676055023, 0.9005898940290741, 0.9027945204526459, 0.9049991468762176,
0.9072037732997894, 0.9094083997233612, 0.911613026146933, 0.9138176525705047, 0.9160222789940765, 0.9182269054176483, 0.9204315318412201,
0.9226361582647918, 0.9248407846883637, 0.9270454111119355, 0.9292500375355073, 0.931454663959079, 0.9336592903826508, 0.9358639168062226,
0.9380685432297944, 0.9402731696533662, 0.9424777960769379 };
__device__ int parameters_values_lens[1] = {
	400
};

__device__ float *parameters_values[1] = {
	parameter_f_values
};

__device__ float data[400][8];

__global__ void initkernel(int seed)
{
	int blockId = blockIdx.x + blockIdx.y * gridDim.x + gridDim.x * gridDim.y * blockIdx.z;
	int idx =
	    blockId * (blockDim.x * blockDim.y * blockDim.z) + (threadIdx.z * (blockDim.x * blockDim.y)) +
	    (threadIdx.y * blockDim.x) + threadIdx.x;

	curandState_t *s = new curandState_t;
	curand_init(seed * idx, idx, 0, s);	// czy mnozenie przez idx jest potrzebne?
	curand_states[idx] = s;
}

__device__ __inline__ float v_diff(int idx, float t, float v, float x, float f)
{
	return 1.0 * f - 0.943734433138374 * v - 1.0 * sinf(x) + 10.813625807439 * cosf(3.76991118430775 * t);
}

__device__ __inline__ float x_diff(int idx, float t, float v, float x, float f)
{
	return v;
}

extern "C" __global__ void prepare_simulation()
{
	int blockId = blockIdx.x + blockIdx.y * gridDim.x + gridDim.x * gridDim.y * blockIdx.z;
	int idx =
	    blockId * (blockDim.x * blockDim.y * blockDim.z) + (threadIdx.z * (blockDim.x * blockDim.y)) +
	    (threadIdx.y * blockDim.x) + threadIdx.x;

	data[idx][0] = 0.0f;	// current step

	float t = data[idx][1] = 0.0;	// t
	float v = data[idx][2] = 0.0;	// v
	data[idx][3] = 0.0f;	// mean_v
	data[idx][4] = 0.0f;	// std_dev_v
	float x = data[idx][5] = 0.0;	// x
	data[idx][6] = 0.0f;	// mean_x
	data[idx][7] = 0.0f;	// std_dev_x
}

__device__ void afterstep(float t, float v, float x)
{

}

extern "C" __global__ void continue_simulation()
{
	int blockId = blockIdx.x + blockIdx.y * gridDim.x + gridDim.x * gridDim.y * blockIdx.z;
	int idx =
	    blockId * (blockDim.x * blockDim.y * blockDim.z) + (threadIdx.z * (blockDim.x * blockDim.y)) +
	    (threadIdx.y * blockDim.x) + threadIdx.x;

	float my_params[1];
	int index = (int)idx / 1;
	for (int i = 0; i < 1; i++) {
		my_params[i] = parameters_values[i][index % parameters_values_lens[i]];
		index = (int)index / parameters_values_lens[i];
	}
	int current_step = (int)data[idx][0];
	float t = data[idx][1];
	float v = data[idx][2];
	float v_next;
	float v_diff_value;
	float mean_v = data[idx][3];
	float std_dev_v = data[idx][4];
	float x = data[idx][5];
	float x_next;
	float x_diff_value;
	float mean_x = data[idx][6];
	float std_dev_x = data[idx][7];
	float tmp_mean = 0;

	float rk4_v_diff_1;
	float rk4_x_diff_1;
	float rk4_v_diff_2;
	float rk4_x_diff_2;
	float rk4_v_diff_3;
	float rk4_x_diff_3;
	float rk4_v_diff_4;
	float rk4_x_diff_4;

	for (int i = 0; i < steps_per_kernel_call; i++) {
	/**
    	 * Integration
    	 */
		rk4_v_diff_1 = v_diff(idx, t, v, x, my_params[0]);
		rk4_x_diff_1 = x_diff(idx, t, v, x, my_params[0]);
		rk4_v_diff_2 =
		    v_diff(idx, t + dt / 2.0, v + dt * rk4_v_diff_1 / 2.0, x + dt * rk4_x_diff_1 / 2.0, my_params[0]);
		rk4_x_diff_2 =
		    x_diff(idx, t + dt / 2.0, v + dt * rk4_v_diff_1 / 2.0, x + dt * rk4_x_diff_1 / 2.0, my_params[0]);
		rk4_v_diff_3 =
		    v_diff(idx, t + dt / 2.0, v + dt * rk4_v_diff_2 / 2.0, x + dt * rk4_x_diff_2 / 2.0, my_params[0]);
		rk4_x_diff_3 =
		    x_diff(idx, t + dt / 2.0, v + dt * rk4_v_diff_2 / 2.0, x + dt * rk4_x_diff_2 / 2.0, my_params[0]);
		rk4_v_diff_4 = v_diff(idx, t + dt, v + dt * rk4_v_diff_3, x + dt * rk4_x_diff_3, my_params[0]);
		rk4_x_diff_4 = x_diff(idx, t + dt, v + dt * rk4_v_diff_3, x + dt * rk4_x_diff_3, my_params[0]);

		v_diff_value = (rk4_v_diff_1 + 2 * rk4_v_diff_2 + 2 * rk4_v_diff_3 + rk4_v_diff_4) / 6.0;
		x_diff_value = (rk4_x_diff_1 + 2 * rk4_x_diff_2 + 2 * rk4_x_diff_3 + rk4_x_diff_4) / 6.0;

		v_next = v + v_diff_value * dt;
		x_next = x + x_diff_value * dt;

		t += dt;

		v = v_next;
		x = x_next;

	/**
         * Averaging
         */
		tmp_mean = mean_v + (v - mean_v) / (current_step + 1.0);
		std_dev_v = std_dev_v + (v - mean_v) * (v - tmp_mean);
		mean_v = tmp_mean;
		tmp_mean = mean_x + (x - mean_x) / (current_step + 1.0);
		std_dev_x = std_dev_x + (x - mean_x) * (x - tmp_mean);
		mean_x = tmp_mean;

	/**
    	 * Afterstep
    	 */
		if (current_step % 1000 == 0) {
			afterstep(t, v, x);
		}

		current_step += 1;
	}

	data[idx][0] = current_step;
	data[idx][1] = t;
	data[idx][2] = v;
	data[idx][3] = mean_v;
	data[idx][4] = std_dev_v;
	data[idx][5] = x;
	data[idx][6] = mean_x;
	data[idx][7] = std_dev_x;
}

extern "C" __global__ void end_simulation(float *summary)
{
	int blockId = blockIdx.x + blockIdx.y * gridDim.x + gridDim.x * gridDim.y * blockIdx.z;
	int idx =
	    blockId * (blockDim.x * blockDim.y * blockDim.z) + (threadIdx.z * (blockDim.x * blockDim.y)) +
	    (threadIdx.y * blockDim.x) + threadIdx.x;

	summary[idx * 6 + 0] = data[idx][2];	// v
	summary[idx * 6 + 1] = data[idx][3];	// mean_v
	summary[idx * 6 + 2] = data[idx][4];	// std_dev_v
	summary[idx * 6 + 3] = data[idx][5];	// x
	summary[idx * 6 + 4] = data[idx][6];	// mean_x
	summary[idx * 6 + 5] = data[idx][7];	// std_dev_x
}
