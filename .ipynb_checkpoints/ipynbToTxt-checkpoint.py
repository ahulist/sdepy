{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'import numpy as np\\n'\n",
      "'from sympy import *\\n'\n",
      "'from IPython.display import display'\n",
      "'# F = ma = sum of:\\n'\n",
      "'    # -friction [gamma]\\n'\n",
      "'    # noise [xi]\\n'\n",
      "'    # noise intensity [D]\\n'\n",
      "'    # potential(x) [U]\\n'\n",
      "'    # oscillating force amplitude [a]\\n'\n",
      "'    # oscillating force(omega, t)\\n'\n",
      "'    # constant force [f]\\n'\n",
      "'\\n'\n",
      "'class Sde():\\n'\n",
      "'    \\n'\n",
      "'    @staticmethod\\n'\n",
      "'    def get_default_options():\\n'\n",
      "'        options = {\\n'\n",
      "\"            'simulation':{\\n\"\n",
      "\"                'spp':100,         # steps per period\\n\"\n",
      "\"                'periods':2000,    # number of periods in the simulation\\n\"\n",
      "\"                'paths':256,       # number of paths to sample\\n\"\n",
      "\"                'samples':100,     # sample the position every N steps\\n\"\n",
      "\"                'transients_number':200,      # number of periods to ignore\\n\"\n",
      "(\"                'transients_fraction':0.1,    # fraction of periods to \"\n",
      " 'ignore\\n')\n",
      "(\"                'transients_type':'fraction', # periods to ignore because of \"\n",
      " 'transients (fraction, number)\\n')\n",
      "\"                'rng_seed':None,\\n\"\n",
      "(\"                'precision':'single',         # precision of the \"\n",
      " 'floating-point numbers (single, double)\\n')\n",
      "\"                'rng_generator':'kiss32', \\n\"\n",
      "\"                'deterministic':False,        # do not generate any noises\\n\"\n",
      "'            },\\n'\n",
      "\"            'output':{\\n\"\n",
      "\"                'mode':'summary',  # output mode (summary, path)\\n\"\n",
      "\"                'format':'text',   # output file format (text, npy)\\n\"\n",
      "\"                'destination':'./sde_out'\\n\"\n",
      "'            },\\n'\n",
      "\"            'debug':{\\n\"\n",
      "\"                'enabled':True,\\n\"\n",
      "'            }\\n'\n",
      "'        }\\n'\n",
      "'        \\n'\n",
      "('    def __init__(self, variables, parameters, functions, equation, values, '\n",
      " 'options = Sde.get_default_options()):\\n')\n",
      "'        self.variables = variables\\n'\n",
      "'        self.parameters = parameters\\n'\n",
      "'        self.functions = functions\\n'\n",
      "'        self.equation = equation\\n'\n",
      "'        self.values = values\\n'\n",
      "'        self.options = options\\n'\n",
      "'    \\n'\n",
      "'    def _validate(self):\\n'\n",
      "'        for symbol in self.equation.free_symbols:\\n'\n",
      "'            if symbol not in variables and symbol not in values:\\n'\n",
      "(\"                raise ValueError('Value(s) for \\\\'%s\\\\' not provided.' % \"\n",
      " 'symbol.name)\\n')\n",
      "'    \\n'\n",
      "'    def _simulate(self):\\n'\n",
      "\"        for path in range(self.options['simulation']['paths']):\\n\"\n",
      "\"            for period in range(self.options['simulation']['periods']):\\n\"\n",
      "\"                for step in range(self.options['simulation']['spp']):\\n\"\n",
      "'                    pass\\n'\n",
      "'    \\n'\n",
      "'    def start(self):\\n'\n",
      "'        self._validate()\\n'\n",
      "'        self._simulate()\\n'\n",
      "'        '\n",
      "'# variables\\n'\n",
      "\"var_x, var_v, var_t = symbols('x v t')\\n\"\n",
      "'variables = {var_x, var_v, var_t}\\n'\n",
      "'\\n'\n",
      "'# parameters\\n'\n",
      "('par_gamma, par_amplitude, par_potential_aplitude, par_omega, '\n",
      " 'par_const_force, par_noise_intensity \\\\\\n')\n",
      "\"    = symbols('gamma a Delta_U omega f D')\\n\"\n",
      "('parameters = {par_gamma, par_amplitude, par_potential_aplitude, par_omega, '\n",
      " 'par_const_force, par_noise_intensity}\\n')\n",
      "'\\n'\n",
      "'# functions\\n'\n",
      "'def oscillation(omega, t):\\n'\n",
      "'    return sin(omega*t)\\n'\n",
      "'\\n'\n",
      "'def potential(x):\\n'\n",
      "'    return sin(x)\\n'\n",
      "'\\n'\n",
      "\"f_potential = Function('U')\\n\"\n",
      "'f_oscillation = oscillation\\n'\n",
      "\"f_noise = Function('xi')\\n\"\n",
      "'functions = {f_potential, f_oscillation, f_noise}\\n'\n",
      "'\\n'\n",
      "'# equation\\n'\n",
      "('equation = -par_gamma*var_v + par_potential_aplitude * f_potential(var_x) + '\n",
      " 'par_amplitude * f_oscillation(par_omega, var_t) \\\\\\n')\n",
      "'    + par_const_force + sqrt(2*par_noise_intensity) * f_noise(var_t)\\n'\n",
      "'\\n'\n",
      "'# parameters values\\n'\n",
      "'values = {\\n'\n",
      "'    par_gamma:1,\\n'\n",
      "'    par_amplitude:1,\\n'\n",
      "'    par_potential_aplitude:1,\\n'\n",
      "'    par_omega:1,\\n'\n",
      "'    par_const_force:np.linspace(0, 1, 10),\\n'\n",
      "'    par_noise_intensity:1,\\n'\n",
      "'}\\n'\n",
      "'\\n'\n",
      "'# runtime options\\n'\n",
      "'options = Sde.get_default_options()\\n'\n",
      "'\\n'\n",
      "'# SDE\\n'\n",
      "'SDE = Sde(variables, parameters, functions, equation, values, options)\\n'\n",
      "'#SDE.start()'\n",
      "'init_printing()\\n'\n",
      "'\\n'\n",
      "'display(eq)\\n'\n",
      "'display(eq.free_symbols)\\n'\n",
      "'print(f_potential)\\n'\n",
      "'print(values)'\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "from pprint import pprint\n",
    "\n",
    "source = './test-Copy1.txt'\n",
    "dest = source+'_tmp.py'\n",
    "\n",
    "with open(source) as source_file:\n",
    "    data = json.load(source_file)\n",
    "\n",
    "with open(dest, 'w') as dest_file:\n",
    "    for cell in data['cells']:\n",
    "        for line in cell['source']:\n",
    "            pprint(line)\n",
    "            dest_file.write(line)\n",
    "        dest_file.write('\\n\\n')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
